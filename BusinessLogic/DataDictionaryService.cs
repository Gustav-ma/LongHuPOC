//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

using LongHu.DataAccess;
using LongHu.Framework;
using LongHu.Framework.Utility;
using System.Linq.Expressions;
using System;
using My.FrameWork.Utilities;
using My.FrameWork.Utilities.Cache;

namespace LongHu.BusinessLogic
{
    public class DataDictionaryService
    {
        #region Save method
        /// <summary>
        ///  save Entity Method
        /// </summary>
        /// <param name="svarDataDictionary"></param>
        public Decimal Add(ObjectModel.DataDictionary svarDataDictionary)
        {
		    svarDataDictionary.IsActive = "1";
            var rmodel = new ConvertModel();
            var sDataDictionary = rmodel.ReturnModel<DataDictionary, ObjectModel.DataDictionary>(svarDataDictionary);
            var dao = new DataDictionaryRepository();
            var newItem=dao.Insert(sDataDictionary);
			return newItem.Id;
        }

        #endregion

        #region Update method
        /// <summary>
        ///  Edit Entity Method
        /// </summary>
        /// <param name="evarDataDictionary"></param>
        public void Update(ObjectModel.DataDictionary evarDataDictionary)
        {
            var rmodel = new ConvertModel();
            var eDataDictionary = rmodel.ReturnModel<DataDictionary, ObjectModel.DataDictionary>(evarDataDictionary);
            var dao = new DataDictionaryRepository();
            var dataDataDictionary = dao.Query(s => s.Id == evarDataDictionary.Id).FirstOrDefault();
            //eDataDictionary.CreatedOn =dataDataDictionary.CreatedOn;
            //eDataDictionary.CreatedByEmployeeId =dataDataDictionary.CreatedByEmployeeId;
            //eDataDictionary.ModifiedByEmployeeId =ConstantManager.GetCurrentUserId();
            //eDataDictionary.ModifiedOn =DateTime.Now;
    		eDataDictionary.IsActive =dataDataDictionary.IsActive;
            dao.Update(eDataDictionary, c => c.Id == eDataDictionary.Id);

        }

        #endregion

        #region Remove method
        /// <summary>
        ///  Delete Entity Method
        /// </summary>
        /// <param name="dvarDataDictionary"></param>    
        public void Remove(ObjectModel.DataDictionary dvarDataDictionary)
        {
            var dao = new DataDictionaryRepository();
            dao.Delete(s => s.Id == dvarDataDictionary.Id);
        }

        #endregion

        #region Get Single
        /// <summary>
        /// 
        /// </summary>
        /// <param name="modelDataDictionary"></param>
        /// <returns></returns>
        public ObjectModel.DataDictionary GetDataDictionaryByID(ObjectModel.DataDictionary modelDataDictionary)
        {
            var rmodel = new ConvertModel();
            var dao = new DataDictionaryRepository();
            var dataDataDictionary = dao.Query(s => s.Id == modelDataDictionary.Id).FirstOrDefault();

            return rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(dataDataDictionary);
        }

        #endregion

        #region Get Query
        /// <summary>
        ///  Get Entity List 
        /// </summary>
        /// <returns>List</returns>
        public IList<ObjectModel.DataDictionary> FindAll()
        {
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.DataDictionary>();
            var daDataDictionary = new DataDictionaryRepository();
            foreach (var vartemp in daDataDictionary.Query(c => c.IsActive == "1"))
            {
                var omDataDictionary = rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(vartemp);
                list.Add(omDataDictionary);
            }
            return list;
        }

        #endregion

        #region Get Page Query
        /// <summary>
        ///  Get Entity Page Query
        /// </summary>
        /// <returns>List</returns>
        public IList<ObjectModel.DataDictionary> QueryByPage<TKey>(Expression<Func<ObjectModel.DataDictionary, bool>> filter, Expression<Func<ObjectModel.DataDictionary, TKey>> orderBy, int orderType, int pageSize, int pageIndex, out int recordsCount)
        {
		    var newFilter = ExpressionConverter<DataDictionary>.Convert(filter);
            var newOrderBy = ExpressionConverter<DataDictionary>.Convert(orderBy);
            var dao = new DataDictionaryRepository();
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.DataDictionary>();
            var dataList= dao.QueryByPage(newFilter, newOrderBy, orderType, pageSize, pageIndex, out recordsCount);
            if (null == dataList) return null;
            foreach (var vartemp in dataList)
            {
                var omDataDictionary = rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(vartemp);
                list.Add(omDataDictionary);
            }
            return list;

        }
		private IList<ObjectModel.DataDictionary> QueryData(Expression<Func<DataDictionary, bool>> filter, Expression<Func<DataDictionary, ObjectModel.DataDictionary>> selector)
        {
             var newfilter = ExpressionConverter<DataDictionary>.Convert(filter);
            var dao = new DataDictionaryRepository();
         
            var dataList = dao.Query(newfilter, p => new ObjectModel.DataDictionary { 
            //write something
            }).ToList();
            return dataList;
        }
        public IList<ObjectModel.DataDictionary> Query(Expression<Func<ObjectModel.DataDictionary, bool>> filter)
        {
		    var newfilter = ExpressionConverter<DataDictionary>.Convert(filter);
            var dao = new DataDictionaryRepository();
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.DataDictionary>();
            var dataList = dao.Query(newfilter).ToList();
            if (null == dataList) return null;
            foreach (var vartemp in dataList)
            {
                var omDataDictionary = rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(vartemp);
                list.Add(omDataDictionary);
            }
            return list;
        }

		public IList<ObjectModel.DataDictionary> QueryByPage(Expression<Func<ObjectModel.DataDictionary, bool>> filter, string orderBy, int pageSize, int pageIndex, out int recordsCount)
        {         
            var newfilter = ExpressionConverter<DataDictionary>.Convert(filter);
			var dao = new DataDictionaryRepository();
            var dataList = dao.QueryByPage(newfilter, orderBy, pageSize, pageIndex, out recordsCount).ToList();           
            if (null == dataList) return null;
            var list = new List<ObjectModel.DataDictionary>();
            var rmodel = new ConvertModel();
            foreach (var vartemp in dataList)
            {
                var omDataDictionary = rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(vartemp);
                list.Add(omDataDictionary);
            }
            return list;

        }
		public IList<ObjectModel.DataDictionary> GetDataDictionaryFromCache()
        {
            var key = "DataDictionary_key";
			var query=CacheHelper.Get(key) as IList<ObjectModel.DataDictionary>;
            if (null == query)
            {
                query = this.Query(q => q.IsActive=="1");
				DateTime ExpirationTime = DateTime.Now.AddMinutes(ConstantManager.CacheCurrentUserExpirationTime);
                CacheHelper.Insert(key, query, ExpirationTime);
            }
            return query;
        }
		public ObjectModel.DataDictionary GetSingleOrDefault(Expression<Func<ObjectModel.DataDictionary, bool>> filter, string orderBy)
        {
            var newfilter = ExpressionConverter<DataDictionary>.Convert(filter);
            var dao = new DataDictionaryRepository();
            int recordCount = 0;
            var data = dao.QueryByPage(newfilter, orderBy, 1, 1, out recordCount).ToList().FirstOrDefault();
            if (null == data) return null;
            var list = new List<ObjectModel.DataDictionary>();
            var rmodel = new ConvertModel();
            return rmodel.ReturnModel<ObjectModel.DataDictionary, DataDictionary>(data);

        }
        #endregion
    }
}



