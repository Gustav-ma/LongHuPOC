//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

using LongHu.DataAccess;
using LongHu.Framework;
using LongHu.Framework.Utility;
using System.Linq.Expressions;
using System;
using My.FrameWork.Utilities;
using My.FrameWork.Utilities.Cache;

namespace LongHu.BusinessLogic
{
    public class EmployeeService
    {
        #region Save method
        /// <summary>
        ///  save Entity Method
        /// </summary>
        /// <param name="svarEmployee"></param>
        public Decimal Add(ObjectModel.Employee svarEmployee)
        {
		    svarEmployee.IsActive = "1";
            var rmodel = new ConvertModel();
            var sEmployee = rmodel.ReturnModel<Employee, ObjectModel.Employee>(svarEmployee);
            var dao = new EmployeeRepository();
            var newItem=dao.Insert(sEmployee);
			return newItem.Id;
        }

        #endregion

        #region Update method
        /// <summary>
        ///  Edit Entity Method
        /// </summary>
        /// <param name="evarEmployee"></param>
        public void Update(ObjectModel.Employee evarEmployee)
        {
            var rmodel = new ConvertModel();
            var eEmployee = rmodel.ReturnModel<Employee, ObjectModel.Employee>(evarEmployee);
            var dao = new EmployeeRepository();
            var dataEmployee = dao.Query(s => s.Id == evarEmployee.Id).FirstOrDefault();
            //eEmployee.CreatedOn =dataEmployee.CreatedOn;
            //eEmployee.CreatedByEmployeeId =dataEmployee.CreatedByEmployeeId;
            //eEmployee.ModifiedByEmployeeId =ConstantManager.GetCurrentUserId();
            //eEmployee.ModifiedOn =DateTime.Now;
    		eEmployee.IsActive =dataEmployee.IsActive;
            dao.Update(eEmployee, c => c.Id == eEmployee.Id);

        }

        #endregion

        #region Remove method
        /// <summary>
        ///  Delete Entity Method
        /// </summary>
        /// <param name="dvarEmployee"></param>    
        public void Remove(ObjectModel.Employee dvarEmployee)
        {
            var dao = new EmployeeRepository();
            dao.Delete(s => s.Id == dvarEmployee.Id);
        }

        #endregion

        #region Get Single
        /// <summary>
        /// 
        /// </summary>
        /// <param name="modelEmployee"></param>
        /// <returns></returns>
        public ObjectModel.Employee GetEmployeeByID(ObjectModel.Employee modelEmployee)
        {
            var rmodel = new ConvertModel();
            var dao = new EmployeeRepository();
            var dataEmployee = dao.Query(s => s.Id == modelEmployee.Id).FirstOrDefault();

            return rmodel.ReturnModel<ObjectModel.Employee, Employee>(dataEmployee);
        }

        #endregion

        #region Get Query
        /// <summary>
        ///  Get Entity List 
        /// </summary>
        /// <returns>List</returns>
        public IList<ObjectModel.Employee> FindAll()
        {
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.Employee>();
            var daEmployee = new EmployeeRepository();
            foreach (var vartemp in daEmployee.Query(c => c.IsActive == "1"))
            {
                var omEmployee = rmodel.ReturnModel<ObjectModel.Employee, Employee>(vartemp);
                list.Add(omEmployee);
            }
            return list;
        }

        #endregion

        #region Get Page Query
        /// <summary>
        ///  Get Entity Page Query
        /// </summary>
        /// <returns>List</returns>
        public IList<ObjectModel.Employee> QueryByPage<TKey>(Expression<Func<ObjectModel.Employee, bool>> filter, Expression<Func<ObjectModel.Employee, TKey>> orderBy, int orderType, int pageSize, int pageIndex, out int recordsCount)
        {
		    var newFilter = ExpressionConverter<Employee>.Convert(filter);
            var newOrderBy = ExpressionConverter<Employee>.Convert(orderBy);
            var dao = new EmployeeRepository();
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.Employee>();
            var dataList= dao.QueryByPage(newFilter, newOrderBy, orderType, pageSize, pageIndex, out recordsCount);
            if (null == dataList) return null;
            foreach (var vartemp in dataList)
            {
                var omEmployee = rmodel.ReturnModel<ObjectModel.Employee, Employee>(vartemp);
                list.Add(omEmployee);
            }
            return list;

        }
		private IList<ObjectModel.Employee> QueryData(Expression<Func<Employee, bool>> filter, Expression<Func<Employee, ObjectModel.Employee>> selector)
        {
             var newfilter = ExpressionConverter<Employee>.Convert(filter);
            var dao = new EmployeeRepository();
         
            var dataList = dao.Query(newfilter, p => new ObjectModel.Employee { 
            //write something
            }).ToList();
            return dataList;
        }
        public IList<ObjectModel.Employee> Query(Expression<Func<ObjectModel.Employee, bool>> filter)
        {
		    var newfilter = ExpressionConverter<Employee>.Convert(filter);
            var dao = new EmployeeRepository();
            var rmodel = new ConvertModel();
            var list = new List<ObjectModel.Employee>();
            var dataList = dao.Query(newfilter).ToList();
            if (null == dataList) return null;
            foreach (var vartemp in dataList)
            {
                var omEmployee = rmodel.ReturnModel<ObjectModel.Employee, Employee>(vartemp);
                list.Add(omEmployee);
            }
            return list;
        }

		public IList<ObjectModel.Employee> QueryByPage(Expression<Func<ObjectModel.Employee, bool>> filter, string orderBy, int pageSize, int pageIndex, out int recordsCount)
        {         
            var newfilter = ExpressionConverter<Employee>.Convert(filter);
			var dao = new EmployeeRepository();
            var dataList = dao.QueryByPage(newfilter, orderBy, pageSize, pageIndex, out recordsCount).ToList();           
            if (null == dataList) return null;
            var list = new List<ObjectModel.Employee>();
            var rmodel = new ConvertModel();
            foreach (var vartemp in dataList)
            {
                var omEmployee = rmodel.ReturnModel<ObjectModel.Employee, Employee>(vartemp);
                list.Add(omEmployee);
            }
            return list;

        }
		public IList<ObjectModel.Employee> GetEmployeeFromCache()
        {
            var key = "Employee_key";
			var query=CacheHelper.Get(key) as IList<ObjectModel.Employee>;
            if (null == query)
            {
                query = this.Query(q => q.IsActive=="1");
				DateTime ExpirationTime = DateTime.Now.AddMinutes(ConstantManager.CacheCurrentUserExpirationTime);
                CacheHelper.Insert(key, query, ExpirationTime);
            }
            return query;
        }
		public ObjectModel.Employee GetSingleOrDefault(Expression<Func<ObjectModel.Employee, bool>> filter, string orderBy)
        {
            var newfilter = ExpressionConverter<Employee>.Convert(filter);
            var dao = new EmployeeRepository();
            int recordCount = 0;
            var data = dao.QueryByPage(newfilter, orderBy, 1, 1, out recordCount).ToList().FirstOrDefault();
            if (null == data) return null;
            var list = new List<ObjectModel.Employee>();
            var rmodel = new ConvertModel();
            return rmodel.ReturnModel<ObjectModel.Employee, Employee>(data);

        }
        #endregion
    }
}



